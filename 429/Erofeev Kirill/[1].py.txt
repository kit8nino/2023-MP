import datetime
from queue import Queue 

my_data = ("Ерофеев Кирилл Сергеевич", 4, 8, 2003)

disc_marks = {
    'Алгебра и Начала Математического Анализа':5,
    'Геометрия':5,
    'Физика':5,
    'География':4,
    'Биология':4,
    'Химия':4,
    'Физическая Культура':4,
    'Информатика и ИКТ':5,
    'История России':4,
    'Всеобщая История':4,
    'Обществознание':4,
    'ОБЖ':4,
    'Русский Язык':3,
    'Английский Язык':3,
    'Литература':3,
    'Астрономия':3,
    'МХК':4,
    }

family_names = ['Кирилл','Никита','Татьяна','Наталья','Сергей','Игорь','Ирина','Виталий','Ирина','Галина','Святослав','Яна','Александра','Мария','Александр','Милана','Алиса','Тамара','Николай','Анатолий','Галина']

kiwi_name = "Black"

#1) Средняя оцнка в аттестате

average_mark = sum(disc_marks.values()) / len(disc_marks.values())

print("1)Cредняя оценка в аттестате:")
print(average_mark)

print("____________________________________________________________________________________________")

#2) Уникальные имена среди родственников

unique_names = []
for name in family_names:
    if name in unique_names:
        continue
    unique_names.append(name)
    
print("\n"+"2)Уникальные имена:")
print(*unique_names)
    

print("____________________________________________________________________________________________")

#3) Общая длина всех названий предметов

lenght=0
for i in list(disc_marks):
    lenght+=(len(i))
    
print("\n"+"3)Общая длина всех названий предметов:"+"\n"+str(lenght))

print("____________________________________________________________________________________________")


#4) Уникальны буквы в назыании предмета

p_letter = []
for letter in list(disc_marks):
    p_letter.extend(list(set(letter)))
    
print("\n"+"4)Уникальные буквы" )

unique_letter=set(p_letter)
print(*unique_letter)

print("____________________________________________________________________________________________")

    
#5) Имя пушистой киви в бинарном виде

print("\n"+"5)Имя kiwi в бинарном виде:")

for ch in bytearray(kiwi_name, 'utf-8'):
    print(bin(ch))


print("____________________________________________________________________________________________")

#6) Отсортированный по алфавиту (в обратном порядке) список родственников;  

print("\n"+"6)Отсортированный по алфавиту (в обратном порядке) список родственников:")

sorted_names = sorted(family_names)
family_names.sort()
family_names.reverse()

print(*family_names)

print("____________________________________________________________________________________________")


#7) Количество дней от вашей даты рождения до текущей даты (должна быть всегда актуальной)

today = datetime.datetime.now()

birthday = datetime.datetime(2003,8,4)

time_diff =today - birthday 

print("\n"+"7)Количество дней от вашей даты рождения до текущей даты:",  time_diff.days)

print("____________________________________________________________________________________________")


#8) FIFO очередь, в которую можно добавлять предметы по вводимому с клавиатуры индексу (до команды остановки), после введения - вывести все;

q=Queue()

print("\n"+'Чтобы прекратить ввод нажмите Enter: ')

for i in list(disc_marks):
    q.put(i)

while True:
    disc=input('  ')
    if disc=='':
        break
    else:
        q.put(disc)
print("8)Вывод всех предметов,после ввода с клавиатуры:")

while True:
    print(q.get(),sep = "\n")
    if q.empty()==True:
        break

print("____________________________________________________________________________________________")


#9) По введеному индексу, поменять имя в отсортированном списке родственников на имя ацтекского правителя (https://en.wikipedia.org/wiki/List_of_rulers_of_Tenochtitlan) под номером, получаемым из вашей даты рождения: number = (day + month**2 + year) % 21 + 1;

number=(int(my_data[1])+int(my_data[2])**2+int(my_data[3]))%21+1

index=int(input("\n"+"Введите индекс от 0 до 20:"))

if index<0 or index>20:
    print("ERROR")
else:
    new_name="Atotoztli"
    family_names[index]=new_name
    print("9) Обновлённый список имён:"+"\n", *family_names, sep = "\n")

print("____________________________________________________________________________________________")



#10) создать связный список, например, как словарь, где ключ - имя родственника, а значение (ссылка на следующий элемент) - индекс следующего имени по исходному списку, упорядоченному по их (родственников) годам рождения), исходный список при этом должен остаться неизменным;

new_family_names= {'Милана 2022':1,'Алиса 2021':2,'Кирилл 2003':0,'Никита 1995':3,'Святослав 1994':4,'Татьяна 1992':5,'Мария 1988':6,'Александр 1988':7,'Александра 1985':8,'Яна 1983':9,'Наталья 1973':10,'Ирина 1973':11,'Сергей 1967':12,'Галина 1967':13,'Игорь 1963':14,'Ирина 1964':15,'Виталий 1960':16,'Тамара 1945':17,'Анатолий 1941':18,'Николай 1938':19,'Галина 1938':20,}

print("10)Связный список, где ключ - имя родственника, а значение - индекс следующего имени по исходному списку, упорядоченному по годам рождения:\n", *new_family_names, sep = "\n")

print("____________________________________________________________________________________________")



#11) написать функцию-генератор, свой вариант определяется как number = len("ФИО") * len (family_names) % 4:

generator = len(my_data[0]) * len (family_names) % 4

#print(len(my_data[0]))
#print(len (family_names))

print("\n"+"11) Number=",generator, "-аликвотная последовательность")

#Генератор аликвотной последовательности

def aliquot_sequence(n):
    sequence = [n]
    while True:
        aliquot_sum = sum([i for i in range(1, sequence[-1]) if sequence[-1] % i == 0])
        if aliquot_sum in sequence:
            sequence.append(aliquot_sum)
            break
        sequence.append(aliquot_sum)
    return sequence

n = int(input("\nВведите началное число последовательности: "))
print("Последовательность: ", aliquot_sequence(n))